// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  role  String @unique @db.VarChar(255)
  users User[]
}

model ArticleType {
  id       Int       @id @default(autoincrement())
  type     String    @unique @db.VarChar(255)
  articles Article[]
}

model HardwareType {
  id        Int        @id @default(autoincrement())
  type      String     @unique @db.VarChar(255)
  hardwares Hardware[]
}

model DocumentType {
  id               Int                @id @default(autoincrement())
  type             String             @unique @db.VarChar(255)
  articleDocuments ArticleDocument[]
  hardwareDocument HardwareDocument[]
}

model User {
  id        Int       @id @default(autoincrement())
  firstname String
  lastname  String
  username  String    @unique
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  roleId Int
  role   Role @relation(fields: [roleId], references: [id])

  articles         Article[]
  articleDocuments ArticleDocument[]
  articleComments  ArticleComment[]

  hardwares         Hardware[]
  hardwareDocuments HardwareDocument[]
  hardwareComments  HardwareComment[]

  article_hardware  Article_Hardware[]
  hardware_hardware Hardware_Hardware[]
}

model Article {
  id             Int       @id @default(autoincrement())
  name           String
  subDescription String
  description    String
  isPublished    Boolean
  createdAt      DateTime  @default(now())
  deletedAt      DateTime?
  modifiedAt     DateTime?

  userId Int
  user   User @relation(fields: [userId], references: [id])

  articleTypeId Int
  articleType   ArticleType @relation(fields: [articleTypeId], references: [id])

  articleId Int?
  article   Article?  @relation("Article_Article", fields: [articleId], references: [id])
  articles  Article[] @relation("Article_Article")

  articleDocuments ArticleDocument[]
  articleComments  ArticleComment[]

  article_hardware Article_Hardware[]
}

model Hardware {
  id                  Int       @id @default(autoincrement())
  name                String
  brand               String
  subDescription      String
  description         String
  isDiy               Boolean
  creationDate        DateTime
  discontinuationDate DateTime?
  createdAt           DateTime  @default(now())
  deletedAt           DateTime?
  modifiedAt          DateTime?
  commercialLinks     String[]

  userId Int
  user   User @relation(fields: [userId], references: [id])

  hardwareTypeId Int
  hardwareType   HardwareType @relation(fields: [hardwareTypeId], references: [id])

  hardwareDocuments HardwareDocument[]
  hardwareComments  HardwareComment[]

  article_hardware Article_Hardware[]

  firstHardwareOf Hardware_Hardware[] @relation("firstHardware")
  secondHardwares Hardware_Hardware[] @relation("secondHardware")
}

model ArticleDocument {
  id        Int      @id @default(autoincrement())
  name      String
  mimetype  String
  buffer    Bytes
  size      Int
  createdAt DateTime @default(now())

  documentTypeId Int
  documentType   DocumentType @relation(fields: [documentTypeId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  articleId Int
  article   Article @relation(fields: [articleId], references: [id])
}

model ArticleComment {
  id         Int       @id @default(autoincrement())
  content    String
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  modifiedAt DateTime?

  userId Int
  user   User @relation(fields: [userId], references: [id])

  articleId Int
  article   Article @relation(fields: [articleId], references: [id])
}

model HardwareDocument {
  id        Int      @id @default(autoincrement())
  name      String
  mimetype  String
  buffer    Bytes
  size      Int
  createdAt DateTime @default(now())

  documentTypeId Int
  documentType   DocumentType @relation(fields: [documentTypeId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  hardwareId Int
  hardware   Hardware @relation(fields: [hardwareId], references: [id])
}

model HardwareComment {
  id         Int       @id @default(autoincrement())
  content    String
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  modifiedAt DateTime?

  userId Int
  user   User @relation(fields: [userId], references: [id])

  hardwareId Int
  hardware   Hardware @relation(fields: [hardwareId], references: [id])
}

model Article_Hardware {
  assigneddAt DateTime @default(now())

  articleId Int
  article   Article @relation(fields: [articleId], references: [id])

  hardwareId Int
  hardware   Hardware @relation(fields: [hardwareId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@unique(fields: [articleId, hardwareId], name: "articleHardwareId")
}

model Hardware_Hardware {
  assigneddAt DateTime @default(now())

  firstHardwareId Int
  firstHardware   Hardware @relation("firstHardware", fields: [firstHardwareId], references: [id])

  secondHardwareId Int
  secondHardware   Hardware @relation("secondHardware", fields: [secondHardwareId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@unique(fields: [firstHardwareId, secondHardwareId], name: "hardwareRelationId")
}
