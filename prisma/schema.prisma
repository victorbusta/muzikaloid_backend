// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id   Int    @id @default(autoincrement())
  role String @unique @db.VarChar(255)

  users User[]
}

model User {
  id              Int     @id @default(autoincrement())
  firstname       String
  lastname        String
  username        String  @unique
  email           String  @unique
  password        String
  validated       Boolean
  token           String?
  profile_picture Bytes?

  created_at DateTime  @default(now())
  deleted_at DateTime?

  role_id Int
  role    Role @relation(fields: [role_id], references: [id])

  articles Article[]
  comments Comment[]
}

model ArticleType {
  id    Int    @id @default(autoincrement())
  label String @unique

  articles Article[]
}

model Article {
  id              Int     @id @default(autoincrement())
  title           String
  sub_description String
  description     String
  published       Boolean

  created_at  DateTime  @default(now())
  deleted_at  DateTime?
  modified_at DateTime?

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  type_id Int
  type    ArticleType @relation(fields: [type_id], references: [id])

  article_id Int?
  article    Article?  @relation("Article_Article", fields: [article_id], references: [id])
  articles   Article[] @relation("Article_Article")

  hardware  Hardware?
  documents Document[]
  comments  Comment[]
}

model Document {
  id      Int    @id @default(autoincrement())
  name    String
  url     String

  article_id Int
  article    Article @relation(fields: [article_id], references: [id])
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String

  created_at  DateTime  @default(now())
  deleted_at  DateTime?
  modified_at DateTime?

  comment_id Int?
  comment    Comment?  @relation("Comment_Comment", fields: [comment_id], references: [id])
  comments   Comment[] @relation("Comment_Comment")

  article_id Int
  article    Article @relation(fields: [article_id], references: [id])

  user_id Int
  user    User @relation(fields: [user_id], references: [id])
}

model HardwareType {
  id    Int    @id @default(autoincrement())
  label String @unique

  hardwares Hardware[]
}

model Hardware {
  id            Int      @id @default(autoincrement())
  brand         String
  is_diy        Boolean
  average_price Int?
  links         String[]

  created_at         DateTime  @default(now())
  discontinuation_at DateTime?

  type_id Int
  type    HardwareType @relation(fields: [type_id], references: [id])

  article_id Int     @unique
  article    Article @relation(fields: [article_id], references: [id])
}
